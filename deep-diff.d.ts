/** Declaration file generated by dts-gen */

export = deep_diff;

declare function deep_diff(lhs: any, rhs: any, prefilter: any, accum: any): any;

declare namespace deep_diff {
    // Circular reference from deep_diff
    const DeepDiff: any;

    // Circular reference from deep_diff
    const diff: any;

    const prototype: {
    };


    interface NewPropertyChange {
        kind: "N";
        path: string[],
        rhs: any,
    }
    
    interface DelPropertyChange {
        kind: "D";
        path: string[],
        lhs: any,
    }
    
    interface PropertyChange {
        kind: "E";
        path: string[],
        lhs: any,
        rhs: any,
    }
    
    interface ArrayChange {
        kind: "A",    
        index: number,
        item: Change,
    }
    
    export type Change = 
        | NewPropertyChange
        | DelPropertyChange
        | PropertyChange
        | ArrayChange
    ;    

    function applyChange(target: any, source: any, change: any): void;

    function applyDiff(target: any, source: any, filter: any): void;

    function isConflict(): any;

    function observableDiff(lhs: any, rhs: any, observer: (d: Change) => void, prefilter: any, orderIndependent: any): any;

    function orderIndepHash(object: any): any;

    function orderIndependentDiff(lhs: any, rhs: any, prefilter: any, accum: any): any;

    function orderIndependentObservableDiff(lhs: any, rhs: any, changes: any, prefilter: any, path: any, key: any, stack: any): any;

    function revertChange(target: any, source: any, change: any): void;

    namespace applyChange {
        const prototype: {
        };

    }

    namespace applyDiff {
        const prototype: {
        };

    }

    namespace isConflict {
        const prototype: {
        };

    }

    namespace observableDiff {
        const prototype: {
        };

    }

    namespace orderIndepHash {
        const prototype: {
        };

    }

    namespace orderIndependentDiff {
        const prototype: {
        };

    }

    namespace orderIndependentObservableDiff {
        const prototype: {
        };

    }

    namespace revertChange {
        const prototype: {
        };

    }

}

